(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {
  if (!Array.from) {
    Array.from = function () {
      var toStr = Object.prototype.toString;

      var isCallable = function isCallable(fn) {
        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
      };

      var toInteger = function toInteger(value) {
        var number = Number(value);

        if (isNaN(number)) {
          return 0;
        }

        if (number === 0 || !isFinite(number)) {
          return number;
        }

        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
      };

      var maxSafeInteger = Math.pow(2, 53) - 1;

      var toLength = function toLength(value) {
        var len = toInteger(value);
        return Math.min(Math.max(len, 0), maxSafeInteger);
      };

      return function from(arrayLike
      /*, mapFn, thisArg */
      ) {
        var C = this;
        var items = Object(arrayLike);

        if (arrayLike == null) {
          throw new TypeError('Array.from requires an array-like object - not null or undefined');
        }

        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
        var T;

        if (typeof mapFn !== 'undefined') {
          if (!isCallable(mapFn)) {
            throw new TypeError('Array.from: when provided, the second argument must be a function');
          }

          if (arguments.length > 2) {
            T = arguments[2];
          }
        }

        var len = toLength(items.length);
        var A = isCallable(C) ? Object(new C(len)) : new Array(len);
        var k = 0;
        var kValue;

        while (k < len) {
          kValue = items[k];

          if (mapFn) {
            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
          } else {
            A[k] = kValue;
          }

          k += 1;
        }

        A.length = len;
        return A;
      };
    }();
  }

  $('#falseinput').click(function () {
    $("#fileinput").click();
  });
  $('#file').change(function () {
    $('#inputFileSuccess').html($('#file')[0].files[0].name);
  });

  function tabsSetHeight() {
    var tabs = $('.contacts-page .tab-pane');
    tabs.map(function (item) {
      $(tabs[item]).css('height', 'auto');
    });
    var maxHeight = Array.from(tabs).reduce(function (a, b) {
      return $(b).innerHeight() > a ? $(b).innerHeight() : a;
    }, 0);
    tabs.map(function (item) {
      $(tabs[item]).css('height', maxHeight + 'px');
    });
  }

  tabsSetHeight();
  $(window).on('resize orientationchange', function () {
    tabsSetHeight();
  });
  jQuery(function () {
    initBgParallax();
  }); // comment

  function initBgParallax() {
    jQuery('.contact-us').parallaxBlock({
      image: 'img',
      fallbackClass: 'is-touch-device'
    });
  }
  /*
   * jQuery BG Parallax plugin
   */


  ;

  (function ($) {
    'use strict';

    var isTouchDevice = /MSIE 10.*Touch/.test(navigator.userAgent) || 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch;

    var ParallaxController = function () {
      var $win = $(window);
      var items = [];
      var winProps = {
        width: 0,
        height: 0,
        scrollTop: 0
      };
      return {
        init: function init() {
          $win.on('load resize orientationchange', this.resizeHandler.bind(this));
          $win.on('scroll', this.scrollHandler.bind(this));
          this.resizeHandler();
        },
        resizeHandler: function resizeHandler() {
          winProps.width = $win.width();
          winProps.height = $win.height();
          $.each(items, this.calculateSize.bind(this));
        },
        scrollHandler: function scrollHandler() {
          winProps.scrollTop = $win.scrollTop();
          $.each(items, this.calculateScroll.bind(this));
        },
        calculateSize: function calculateSize(i) {
          var item = items[i];
          item.height = Math.max(item.$el.outerHeight(), winProps.height);
          item.width = item.$el.outerWidth();
          item.topOffset = item.$el.offset().top;
          var styles = this.getDimensions({
            imageRatio: item.imageRatio,
            itemWidth: item.width,
            itemHeight: item.height
          });
          item.$el.css({
            backgroundSize: Math.round(styles.width) + 'px ' + Math.round(styles.height) + 'px'
          });
          this.calculateScroll(i);
        },
        calculateScroll: function calculateScroll(i) {
          var item = items[i];

          if (winProps.scrollTop + winProps.height > item.topOffset && winProps.scrollTop < item.topOffset + item.height) {
            var ratio = (winProps.scrollTop + winProps.height - item.topOffset) / (winProps.height + item.height);
            item.$el.css({
              backgroundPosition: '50% ' + (winProps.height * (item.options.parallaxOffset / 100) - (winProps.height + item.height) * ratio * (item.options.parallaxOffset / 100)) + 'px'
            });
          }
        },
        getDimensions: function getDimensions(data) {
          var slideHeight = data.itemWidth / data.imageRatio;

          if (slideHeight < data.itemHeight) {
            slideHeight = data.itemHeight;
            data.itemWidth = slideHeight * data.imageRatio;
          }

          return {
            width: data.itemWidth,
            height: slideHeight,
            top: (data.itemHeight - slideHeight) / 2,
            left: (data.itemWidth - data.itemWidth) / 2
          };
        },
        getRatio: function getRatio(image) {
          if (image.prop('naturalWidth')) {
            return image.prop('naturalWidth') / image.prop('naturalHeight');
          } else {
            var img = new Image();
            img.src = image.prop('src');
            return img.width / img.height;
          }
        },
        imageLoaded: function imageLoaded(image, callback) {
          var self = this;

          var loadHandler = function loadHandler() {
            callback.call(self);
          };

          if (image.prop('complete')) {
            loadHandler();
          } else {
            image.one('load', loadHandler);
          }
        },
        add: function add(el, options) {
          var $el = $(el);
          var $image = $el.find(options.image);
          this.imageLoaded($image, function () {
            var imageRatio = this.getRatio($image);
            $el.css({
              backgroundImage: 'url(' + $image.attr('src') + ')',
              backgroundRepeat: 'no-repeat',
              backgroundAttachment: !isTouchDevice ? 'fixed' : 'scroll',
              backgroundSize: 'cover'
            });
            $image.remove();

            if (isTouchDevice) {
              $el.addClass(options.fallbackClass);
              return;
            }

            options.parallaxOffset = Math.abs(options.parallaxOffset);
            var newIndex = items.push({
              $el: $(el),
              options: options,
              imageRatio: imageRatio
            });
            this.calculateSize(newIndex - 1);
          });
        }
      };
    }();

    ParallaxController.init();

    $.fn.parallaxBlock = function (options) {
      options = $.extend({
        parallaxOffset: 5,
        // percent from 0 - top 100 (from window height)
        fallbackClass: 'is-touch-device',
        image: 'img'
      }, options);
      return this.each(function () {
        if (this.added) {
          return;
        }

        this.added = true;
        ParallaxController.add(this, options);
      });
    };
  })(jQuery);
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsQ0FBQyxDQUFDLFFBQUQsQ0FBRCxDQUFZLEtBQVosQ0FBbUIsWUFBVztBQUMxQixNQUFJLENBQUMsS0FBSyxDQUFDLElBQVgsRUFBaUI7QUFDYixJQUFBLEtBQUssQ0FBQyxJQUFOLEdBQWMsWUFBVztBQUNyQixVQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUCxDQUFpQixRQUE3Qjs7QUFDQSxVQUFJLFVBQVUsR0FBRyxTQUFiLFVBQWEsQ0FBUyxFQUFULEVBQWE7QUFDMUIsZUFBTyxPQUFPLEVBQVAsS0FBYyxVQUFkLElBQTRCLEtBQUssQ0FBQyxJQUFOLENBQVcsRUFBWCxNQUFtQixtQkFBdEQ7QUFDSCxPQUZEOztBQUdBLFVBQUksU0FBUyxHQUFHLFNBQVosU0FBWSxDQUFVLEtBQVYsRUFBaUI7QUFDN0IsWUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUQsQ0FBbkI7O0FBQ0EsWUFBSSxLQUFLLENBQUMsTUFBRCxDQUFULEVBQW1CO0FBQUUsaUJBQU8sQ0FBUDtBQUFXOztBQUNoQyxZQUFJLE1BQU0sS0FBSyxDQUFYLElBQWdCLENBQUMsUUFBUSxDQUFDLE1BQUQsQ0FBN0IsRUFBdUM7QUFBRSxpQkFBTyxNQUFQO0FBQWdCOztBQUN6RCxlQUFPLENBQUMsTUFBTSxHQUFHLENBQVQsR0FBYSxDQUFiLEdBQWlCLENBQUMsQ0FBbkIsSUFBd0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFJLENBQUMsR0FBTCxDQUFTLE1BQVQsQ0FBWCxDQUEvQjtBQUNILE9BTEQ7O0FBTUEsVUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULEVBQVksRUFBWixJQUFrQixDQUF2Qzs7QUFDQSxVQUFJLFFBQVEsR0FBRyxTQUFYLFFBQVcsQ0FBVSxLQUFWLEVBQWlCO0FBQzVCLFlBQUksR0FBRyxH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UUFBSixDQUFhLE9BQU8sQ0FBQyxhQUFyQjtBQUNBO0FBQ0g7O0FBRUQsWUFBQSxPQUFPLENBQUMsY0FBUixHQUF5QixJQUFJLENBQUMsR0FBTCxDQUFTLE9BQU8sQ0FBQyxjQUFqQixDQUF6QjtBQUVBLGdCQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBTixDQUFXO0FBQ3RCLGNBQUEsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFELENBRGdCO0FBRXRCLGNBQUEsT0FBTyxFQUFFLE9BRmE7QUFHdEIsY0FBQSxVQUFVLEVBQUU7QUFIVSxhQUFYLENBQWY7QUFNQSxpQkFBSyxhQUFMLENBQW1CLFFBQVEsR0FBRyxDQUE5QjtBQUNILFdBMUJEO0FBMkJIO0FBekhFLE9BQVA7QUEySEgsS0FwSXlCLEVBQTFCOztBQXNJQSxJQUFBLGtCQUFrQixDQUFDLElBQW5COztBQUVBLElBQUEsQ0FBQyxDQUFDLEVBQUYsQ0FBSyxhQUFMLEdBQXFCLFVBQVMsT0FBVCxFQUFpQjtBQUNsQyxNQUFBLE9BQU8sR0FBRyxDQUFDLENBQUMsTUFBRixDQUFTO0FBQ2YsUUFBQSxjQUFjLEVBQUUsQ0FERDtBQUNJO0FBQ25CLFFBQUEsYUFBYSxFQUFFLGlCQUZBO0FBR2YsUUFBQSxLQUFLLEVBQUU7QUFIUSxPQUFULEVBSVAsT0FKTyxDQUFWO0FBTUEsYUFBTyxLQUFLLElBQUwsQ0FBVSxZQUFXO0FBQ3hCLFlBQUksS0FBSyxLQUFULEVBQWdCO0FBQ1o7QUFDSDs7QUFFRCxhQUFLLEtBQUwsR0FBYSxJQUFiO0FBQ0EsUUFBQSxrQkFBa0IsQ0FBQyxHQUFuQixDQUF1QixJQUF2QixFQUE2QixPQUE3QjtBQUNILE9BUE0sQ0FBUDtBQVFILEtBZkQ7QUFnQkgsR0E3SkMsRUE2SkEsTUE3SkEsQ0FBRDtBQThKSixDQXRRRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIiQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuICAgIGlmICghQXJyYXkuZnJvbSkge1xyXG4gICAgICAgIEFycmF5LmZyb20gPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbiAgICAgICAgICAgIHZhciBpc0NhbGxhYmxlID0gZnVuY3Rpb24oZm4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciB0b0ludGVnZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBudW1iZXIgPSBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKG51bWJlcikpIHsgcmV0dXJuIDA7IH1cclxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDAgfHwgIWlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIG51bWJlcjsgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChudW1iZXIgPiAwID8gMSA6IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBtYXhTYWZlSW50ZWdlciA9IE1hdGgucG93KDIsIDUzKSAtIDE7XHJcbiAgICAgICAgICAgIHZhciB0b0xlbmd0aCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IHRvSW50ZWdlcih2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobGVuLCAwKSwgbWF4U2FmZUludGVnZXIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlLyosIG1hcEZuLCB0aGlzQXJnICovKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgQyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gT2JqZWN0KGFycmF5TGlrZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5TGlrZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkuZnJvbSByZXF1aXJlcyBhbiBhcnJheS1saWtlIG9iamVjdCAtIG5vdCBudWxsIG9yIHVuZGVmaW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdm9pZCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgVDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWFwRm4gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKG1hcEZuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5mcm9tOiB3aGVuIHByb3ZpZGVkLCB0aGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFQgPSBhcmd1bWVudHNbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBsZW4gPSB0b0xlbmd0aChpdGVtcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIEEgPSBpc0NhbGxhYmxlKEMpID8gT2JqZWN0KG5ldyBDKGxlbikpIDogbmV3IEFycmF5KGxlbik7XHJcbiAgICAgICAgICAgICAgICB2YXIgayA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIga1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBrVmFsdWUgPSBpdGVtc1trXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWFwRm4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQVtrXSA9IHR5cGVvZiBUID09PSAndW5kZWZpbmVkJyA/IG1hcEZuKGtWYWx1ZSwgaykgOiBtYXBGbi5jYWxsKFQsIGtWYWx1ZSwgayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQVtrXSA9IGtWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgayArPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgQS5sZW5ndGggPSBsZW47XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KCkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAkKCcjZmFsc2VpbnB1dCcpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJChcIiNmaWxlaW5wdXRcIikuY2xpY2soKTtcclxuICAgIH0pO1xyXG5cclxuICAgICQoJyNmaWxlJykuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJyNpbnB1dEZpbGVTdWNjZXNzJykuaHRtbCgkKCcjZmlsZScpWzBdLmZpbGVzWzBdLm5hbWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gdGFic1NldEhlaWdodCgpIHtcclxuICAgICAgICBjb25zdCB0YWJzID0gJCgnLmNvbnRhY3RzLXBhZ2UgLnRhYi1wYW5lJyk7XHJcbiAgICAgICAgdGFicy5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICQodGFic1tpdGVtXSkuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IG1heEhlaWdodCA9IEFycmF5LmZyb20odGFicykucmVkdWNlKChhLGIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICQoYikuaW5uZXJIZWlnaHQoKSA+IGEgPyAkKGIpLmlubmVySGVpZ2h0KCkgOiBhO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICAgIHRhYnMubWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAkKHRhYnNbaXRlbV0pLmNzcygnaGVpZ2h0JywgbWF4SGVpZ2h0ICsgJ3B4Jyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGFic1NldEhlaWdodCgpO1xyXG5cclxuICAgICQod2luZG93KS5vbigncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRhYnNTZXRIZWlnaHQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGpRdWVyeShmdW5jdGlvbigpIHtcclxuICAgICAgICBpbml0QmdQYXJhbGxheCgpO1xyXG4gICAgfSk7XHJcblxyXG5cclxuLy8gY29tbWVudFxyXG4gICAgZnVuY3Rpb24gaW5pdEJnUGFyYWxsYXgoKSB7XHJcbiAgICAgICAgalF1ZXJ5KCcuY29udGFjdC11cycpLnBhcmFsbGF4QmxvY2soe1xyXG4gICAgICAgICAgICBpbWFnZTogJ2ltZycsXHJcbiAgICAgICAgICAgIGZhbGxiYWNrQ2xhc3M6ICdpcy10b3VjaC1kZXZpY2UnXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBqUXVlcnkgQkcgUGFyYWxsYXggcGx1Z2luXHJcbiAgICAgKi9cclxuICAgIDsoZnVuY3Rpb24oJCl7XHJcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgICAgICB2YXIgaXNUb3VjaERldmljZSA9IC9NU0lFIDEwLipUb3VjaC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2g7XHJcblxyXG4gICAgICAgIHZhciBQYXJhbGxheENvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciAkd2luID0gJCh3aW5kb3cpO1xyXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHdpblByb3BzID0ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IDBcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkd2luLm9uKCdsb2FkIHJlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMucmVzaXplSGFuZGxlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICAkd2luLm9uKCdzY3JvbGwnLCB0aGlzLnNjcm9sbEhhbmRsZXIuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplSGFuZGxlcigpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICByZXNpemVIYW5kbGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5Qcm9wcy53aWR0aCA9ICR3aW4ud2lkdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICB3aW5Qcm9wcy5oZWlnaHQgPSAkd2luLmhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goaXRlbXMsIHRoaXMuY2FsY3VsYXRlU2l6ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsSGFuZGxlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luUHJvcHMuc2Nyb2xsVG9wID0gJHdpbi5zY3JvbGxUb3AoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGl0ZW1zLCB0aGlzLmNhbGN1bGF0ZVNjcm9sbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlU2l6ZTogZnVuY3Rpb24oaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaGVpZ2h0ID0gTWF0aC5tYXgoaXRlbS4kZWwub3V0ZXJIZWlnaHQoKSwgd2luUHJvcHMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLndpZHRoID0gaXRlbS4kZWwub3V0ZXJXaWR0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udG9wT2Zmc2V0ID0gaXRlbS4kZWwub2Zmc2V0KCkudG9wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXREaW1lbnNpb25zKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VSYXRpbzogaXRlbS5pbWFnZVJhdGlvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtV2lkdGg6IGl0ZW0ud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1IZWlnaHQ6IGl0ZW0uaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uJGVsLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiBNYXRoLnJvdW5kKHN0eWxlcy53aWR0aCkgKyAncHggJyArIE1hdGgucm91bmQoc3R5bGVzLmhlaWdodCkgKyAncHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlU2Nyb2xsKGkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVTY3JvbGw6IGZ1bmN0aW9uKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAod2luUHJvcHMuc2Nyb2xsVG9wICsgd2luUHJvcHMuaGVpZ2h0ID4gaXRlbS50b3BPZmZzZXQgJiYgd2luUHJvcHMuc2Nyb2xsVG9wIDwgaXRlbS50b3BPZmZzZXQgKyBpdGVtLmhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF0aW8gPSAod2luUHJvcHMuc2Nyb2xsVG9wICsgd2luUHJvcHMuaGVpZ2h0IC0gaXRlbS50b3BPZmZzZXQpIC8gKHdpblByb3BzLmhlaWdodCArIGl0ZW0uaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uJGVsLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICc1MCUgJyArICh3aW5Qcm9wcy5oZWlnaHQgKiAoaXRlbS5vcHRpb25zLnBhcmFsbGF4T2Zmc2V0IC8gMTAwKSAtICh3aW5Qcm9wcy5oZWlnaHQgKyBpdGVtLmhlaWdodCkgKiByYXRpbyAqIChpdGVtLm9wdGlvbnMucGFyYWxsYXhPZmZzZXQgLyAxMDApKSArICdweCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBnZXREaW1lbnNpb25zOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlSGVpZ2h0ID0gZGF0YS5pdGVtV2lkdGggLyBkYXRhLmltYWdlUmF0aW87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUhlaWdodCA8IGRhdGEuaXRlbUhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUhlaWdodCA9IGRhdGEuaXRlbUhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pdGVtV2lkdGggPSBzbGlkZUhlaWdodCAqIGRhdGEuaW1hZ2VSYXRpbztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGRhdGEuaXRlbVdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHNsaWRlSGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IChkYXRhLml0ZW1IZWlnaHQgLSBzbGlkZUhlaWdodCkgLyAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAoZGF0YS5pdGVtV2lkdGggLSBkYXRhLml0ZW1XaWR0aCkgLyAyXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgZ2V0UmF0aW86IGZ1bmN0aW9uKGltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLnByb3AoJ25hdHVyYWxXaWR0aCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbWFnZS5wcm9wKCduYXR1cmFsV2lkdGgnKSAvIGltYWdlLnByb3AoJ25hdHVyYWxIZWlnaHQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBpbWFnZS5wcm9wKCdzcmMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGltZy53aWR0aCAvIGltZy5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBpbWFnZUxvYWRlZDogZnVuY3Rpb24oaW1hZ2UsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHNlbGYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLnByb3AoJ2NvbXBsZXRlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEhhbmRsZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZS5vbmUoJ2xvYWQnLCBsb2FkSGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyICRlbCA9ICQoZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW1hZ2UgPSAkZWwuZmluZChvcHRpb25zLmltYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZUxvYWRlZCgkaW1hZ2UsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1hZ2VSYXRpbyA9IHRoaXMuZ2V0UmF0aW8oJGltYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiAndXJsKCcgKyAkaW1hZ2UuYXR0cignc3JjJykgKyAnKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRBdHRhY2htZW50OiAhaXNUb3VjaERldmljZSA/ICdmaXhlZCcgOiAnc2Nyb2xsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJGltYWdlLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVG91Y2hEZXZpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlbC5hZGRDbGFzcyhvcHRpb25zLmZhbGxiYWNrQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnBhcmFsbGF4T2Zmc2V0ID0gTWF0aC5hYnMob3B0aW9ucy5wYXJhbGxheE9mZnNldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SW5kZXggPSBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlbDogJChlbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VSYXRpbzogaW1hZ2VSYXRpb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlU2l6ZShuZXdJbmRleCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0oKSk7XHJcblxyXG4gICAgICAgIFBhcmFsbGF4Q29udHJvbGxlci5pbml0KCk7XHJcblxyXG4gICAgICAgICQuZm4ucGFyYWxsYXhCbG9jayA9IGZ1bmN0aW9uKG9wdGlvbnMpe1xyXG4gICAgICAgICAgICBvcHRpb25zID0gJC5leHRlbmQoe1xyXG4gICAgICAgICAgICAgICAgcGFyYWxsYXhPZmZzZXQ6IDUsIC8vIHBlcmNlbnQgZnJvbSAwIC0gdG9wIDEwMCAoZnJvbSB3aW5kb3cgaGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgZmFsbGJhY2tDbGFzczogJ2lzLXRvdWNoLWRldmljZScsXHJcbiAgICAgICAgICAgICAgICBpbWFnZTogJ2ltZydcclxuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBQYXJhbGxheENvbnRyb2xsZXIuYWRkKHRoaXMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfShqUXVlcnkpKTtcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuIl19
